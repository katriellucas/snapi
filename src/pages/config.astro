---
import { validSession } from '../libs/session';
import {
	profileUpdateForm,
	uploadPhotoForm,
	deployForm,
	deletePhotoForm,
	editPhotoForm,
} from '../libs/forms';

import Layout from '../layouts/Logged.astro';
import CommonButton from '@components/CommonButton.astro';
import Dialog from '@components/Dialog.astro';
import UploadArea from '@components/UploadArea.astro';
import { Icon } from 'astro-icon/components';
import { gallery } from '../libs/stores';
import Thumbnail from '@components/Thumbnail.astro';
import Photo from '@components/Photo.astro';
import { photoList } from '../libs/helpers';
import IconButton from '@components/IconButton.astro';

const session = Astro.cookies.get('session')?.value;

const sessionValid = await validSession(session);

if (!sessionValid) {
	Astro.cookies.delete('session');
	return Astro.redirect('/login');
}

const photomap = await fetch(Astro.url.origin + '/data/photomap.json').then(res => res.json());


const { blobs } = await gallery.list();

// const serverPhotomap = await Promise.all(
// 	blobs.map(async ({ key }) => {
// 		const photo = photomap.find((photo: { key: string }) => photo.key === key);

// 		return photo === undefined ? gallery.getWithMetadata(key) : photo;
// 	}),
// );

// console.log(serverPhotomap);

// for (const { key } of blobs) {
// 	gallery.delete(key);
// }

const action = Astro.url.searchParams.get('action');
const alert = Astro.url.searchParams.get('alert');
const photo = Astro.url.searchParams.get('photo');

const key = Astro.url.searchParams.get('key');
const params = `?${Astro.url.searchParams}`;

if (Astro.request.method === 'POST') {
	if (!sessionValid) return 'Invalid session.';

	const formData = await Astro.request.formData();

	let result;
	switch (action) {
		case 'profile-update':
			result = await profileUpdateForm(formData);
			return Astro.redirect('/config?alert=' + result);
		case 'upload-photo':
			result = await uploadPhotoForm(formData);
			return Astro.redirect('/config?alert=' + result);
		case 'deploy':
			result = await deployForm();
			return Astro.redirect('/config?alert=' + result);
		case 'edit':
			result = await editPhotoForm(formData);
			return Astro.redirect('/config?alert=' + result);
		case 'delete':
			result = await deletePhotoForm(formData);
			return Astro.redirect('/config?alert=' + result);
		default:
			break;
	}
}
---

<Layout title="Configuration">
	<!-- alerts -->
	{
		photo && (
			<Dialog centered href={'/config#' + photo}>
				<Photo key={photo} />
			</Dialog>
		)
	}
	{
		alert && (
			<div class="alert">
				<Icon class="alert-icon" name="tabler:alert-square-rounded" width={24} height={24} />
				<div class="alert-text">{decodeURIComponent(alert)}</div>
				<IconButton icon="tabler:x" href="/config" />
			</div>
		)
	}
	{
		action === 'deploy' && (
			<Dialog centered href="config">
				<div class="form-card">
					<h1>Update your Snapi?</h1>
					<p>Any changes you have done on your profile or gallery will be available online.</p>
					<form class="form-card-footer" method="post" action={params}>
						<CommonButton href="config">Cancel</CommonButton>
						<CommonButton primary>Publish</CommonButton>
					</form>
				</div>
			</Dialog>
		)
	}
	{
		(action === 'upload-photo' || action === 'edit') && (
			<Dialog href={key ? 'config#' + key : 'config'}>
				<UploadArea key={key ?? undefined} action={params} />
			</Dialog>
		)
	}
	{
		action === 'delete' && (
			<Dialog centered href={'config#' + key}>
				<div class="form-card">
					<h1>Delete this photo?</h1>
					<p>This action cannot be undone. Are you sure?</p>
					<form class="form-card-footer" method="post" action={params}>
						<CommonButton href={'config#' + key}>Cancel</CommonButton>
						<CommonButton primary value={key} name="key">
							Delete
						</CommonButton>
					</form>
				</div>
			</Dialog>
		)
	}
	<!-- alerts -->

	<div class="photo-grid">
		{
			blobs.map(({ key }: any) => {
				return (
					<div class="thumb-wrapper">
						<Thumbnail {key}>
							<div style="display: flex;">
								<CommonButton wide href={`?action=edit&key=${key}`}>
									Edit
								</CommonButton>
								<CommonButton wide danger href={`?action=delete&key=${key}`}>
									Delete
								</CommonButton>
							</div>
						</Thumbnail>
					</div>
				);
			})
		}
	</div>
</Layout>

<style>
	h1 {
		font: var(--title-large);
	}

	p {
		font: var(--body-large);
	}

	.centered-container {
		align-items: center;
		display: flex;
		height: 100%;
		justify-content: center;
		width: 100%;
	}

	.form-card {
		background: var(--outline); /* maybe change */
		border-radius: 12px;
		box-shadow:
			0px 1px 2px rgba(0, 0, 0, 0.3),
			0px 2px 6px 2px rgba(0, 0, 0, 0.15);
		display: flex;
		flex-direction: column;
		gap: 16px;
		max-width: 480px;
		padding: 24px;
		width: 100%;
	}

	.form-card-footer {
		display: flex;
		justify-content: flex-end;
		gap: 4px;
	}

	.alert {
		align-items: center;
		background: var(--outline);
		border-radius: var(--corner-16);
		display: flex;
		font: var(--body-large);
		gap: 12px;
		margin-bottom: 16px;
		padding: 8px 16px;
	}

	.alert-text {
		flex: 1;
	}

	.alert-icon {
		min-height: 24x;
		min-width: 24x;
	}

	.photo-grid {
		display: grid;
		grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
		gap: 8px;
	}

	@media (min-width: 600px) {
		.photo-grid {
			grid-template-columns: repeat(auto-fill, minmax(155px, 1fr));
		}
	}

	@media (min-width: 840px) {
		.photo-grid {
			gap: 12px;
		}
	}

	@media (min-width: 905px) {
		.photo-grid {
			grid-template-columns: repeat(auto-fill, minmax(175px, 1fr));
		}
	}

	@media (min-width: 1200px) {
		.photo-grid {
			grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
		}
	}

	.thumb-wrapper {
		display: flex;
		flex-direction: column;
	}
</style>

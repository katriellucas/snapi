---
export const prerender = false;

import { getStore } from '@netlify/blobs';
import slugify from 'slugify';
import { fileTypeFromBlob } from 'file-type';

import Fullscreen from '../layouts/Fullscreen.astro';

if (Astro.request.method === 'POST') {
	const formData = await Astro.request.formData();
	const file = formData.get('file') as File;
	const uuid = self.crypto.randomUUID();

	const gallery = getStore('gallery');

	// Check if photo already exists
	const key = slugify(String(name), { lower: true });

	if (await gallery.get(key)) {
		return new Response('Photo already exists.', { status: 400 });
	}

	// Check if file type is valid
	const fileType = await fileTypeFromBlob(file);

	if (fileType?.ext && !['jpg', 'jpeg', 'png', 'gif', 'webp', 'avif'].includes(fileType.ext)) {
		return new Response('Invalid file type.', { status: 400 });
	}

	await gallery.set(uuid, file, { metadata: fileType });

	// await gallery.set(key, file);
	// entry2 = await gallery.get(key, { type: "blob" });

	// const test = await gallery.get(key, { type: "glob" });
}
---

<Fullscreen title="Welcome to Astro.">
	<main>
		<h1>Register</h1>
		<form method="POST" enctype="multipart/form-data">
			<label>
				image:
				<input type="file" name="file" required />
			</label>
			<!-- <label>
				name:
				<input name="name" required />
			</label> -->
			<button>Submit</button>
		</form>
	</main>
</Fullscreen>

<style>
	main {
		margin: auto;
		padding: 1rem;
		width: 800px;
		max-width: calc(100% - 2rem);
		color: white;
		font-size: 20px;
		line-height: 1.6;
	}
	.astro-a {
		position: absolute;
		top: -32px;
		left: 50%;
		transform: translatex(-50%);
		width: 220px;
		height: auto;
		z-index: -1;
	}
	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		margin-bottom: 2rem;
		border: 1px solid rgba(var(--accent-light), 25%);
		background: linear-gradient(rgba(var(--accent-dark), 66%), rgba(var(--accent-dark), 33%));
		padding: 1.5rem;
		border-radius: 8px;
	}
	.instructions code {
		font-size: 0.8em;
		font-weight: bold;
		background: rgba(var(--accent-light), 12%);
		color: rgb(var(--accent-light));
		border-radius: 4px;
		padding: 0.3em 0.4em;
	}
	.instructions strong {
		color: rgb(var(--accent-light));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 2rem;
		padding: 0;
	}
</style>

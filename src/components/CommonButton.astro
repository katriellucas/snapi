---
import { Icon } from 'astro-icon/components';

interface Props {
	href?: string;
	// onclick?: (...args: any) => unknown;
	target?: '_blank' | '_self' | '_parent' | '_top';
	type?: 'button' | 'reset' | 'submit';
	visual?: 'filled' | 'outline' | 'standard' | 'tonal';
}

const { href, ...props } = Astro.props;

const El = href ? 'a' : 'button';
---

<El class="common-button target" {...props} {href}>
	<span class="container ripple {visual}">
		<slot />
	</span>
</El>

<!-- {#if type === 'file'}
	<label class="common-button target" class:wide>
		<span class="button ripple {visual}">
			<input type="file" bind:files {multiple} class="visually-hidden" />
			{#if icon}<Icon {icon} />{/if}
			{label}
		</span>
	</label>
{:else if href}
	<a class="common-button target" {href} {...props} class:wide>
		<span class="button ripple {visual}">
			{#if icon}<Icon {icon} />{/if}
			{label}
		</span>
	</a>
{:else}
	<button class="common-button target" {type} {...props} class:wide>
		<span class="button ripple {visual}">
			{#if icon}<Icon {icon} />{/if}
			{label}
		</span>
	</button>
{/if} -->

<style>
	.common-button {
		align-items: center;
		cursor: pointer;
		display: flex;
		height: 48px;
		justify-content: center;
		width: 100%;
	}

	.container {
		align-items: center;
		background: #fff;
		border-radius: 8px;
		color: #000;
		display: flex;
		font: var(--title-medium);

		height: 40px;
		justify-content: center;
		padding: 0 24px;
		width: 100%;
	}

	// COLORS OPTIONS ðŸŽ¨
	.elevated {
		background: var(--surface-container-low);
		box-shadow: var(--elevation-1); // !!! likely
		color: var(--primary);
	}

	.filled {
		background: var(--primary);
		color: var(--on-primary);
	}

	.tonal {
		background: var(--secondary-container);
		color: var(--on-secondary-container);
	}

	.outline {
		border: 1px solid var(--outline);
		color: var(--primary);
	}

	.text {
		color: var(--primary);
		padding: 0 12px;
	}

	.inverse-text {
		color: var(--inverse-primary);
		padding: 0 12px;
	}
</style>
